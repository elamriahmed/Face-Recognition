stages:
  - package_registry
  - build
  - sonarqube-check
  - security_scan
  - push


variables:
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_DRIVER: overlay2

# ------------------------
# BACKEND JOBS
# ------------------------

build_backend:
  stage: build
  image: docker:24.0.7
  services:
    - name: docker:24.0.7-dind
      entrypoint:
        - /bin/sh
        - -c
        - dockerd-entrypoint.sh --insecure-registry $CI_REGISTRY || exit
  script:
    - echo "Building backend Docker image..."
    - echo "Tagging backend image as $CI_REGISTRY_IMAGE/backend"
    - docker build -t $CI_REGISTRY_IMAGE/backend .

push_backend:
  stage: push
  image: docker:24.0.7
  variables:
    DOCKER_TLS_CERTDIR: ""
  services:
    - name: docker:24.0.7-dind
  script:
    - echo "Pushing $CI_REGISTRY_IMAGE/backend backend image to registry..."
    - docker login  -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" http://$CI_REGISTRY
    - docker push $CI_REGISTRY_IMAGE/backend:latest

# ------------------------
# PACKAGE REGISTRY JOBS
# ------------------------

package_registry_Backend:
  stage: package_registry
  image: alpine  # Lightweight base image
  script:
    - echo "Installing curl..."
    - apk update && apk add curl  # Install curl in the Alpine image

    - echo "Creating and pushing a tarball to GitLab's generic package registry..."

    # Create the tarball of your project directory
    - tar -czvf Face_Recognition_App.tar.gz .

    # Verify that the tarball was created
    - ls -al

    # Upload the tarball using `curl`
    - echo "Uploading tarball to GitLab's generic package registry..."
    - >
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file Face_Recognition_App.tar.gz
      "https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/packages/generic/your-package-name/1.0/your-package.tar.gz"

    # List contents to verify
    - ls -al







package_registry_Frontend:
  stage: package_registry
  image: node:18
  script:
    - echo "Publishing package to GitLab registry..."
    - cd face-recog-app
    - echo "//gitlab.com/api/v4/projects/${CI_PROJECT_ID}/packages/npm/:_authToken=${CI_JOB_TOKEN}" > .npmrc
    - npm ci  # Installe les dépendances sans node_modules volumineux
    - npm publish --registry=https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/packages/npm/ || true
    - ls -al  # Lister les fichiers publiés pour vérification


# ------------------------
# FRONTEND JOBS
# ------------------------

build_frontend:
  stage: build
  image: docker:24.0.7
  services:
    - name: docker:24.0.7-dind
      entrypoint:
        - /bin/sh
        - -c
        - dockerd-entrypoint.sh --insecure-registry $CI_REGISTRY || exit
  script:
    - cd face-recog-app  # Naviguer vers le répertoire du frontend
    - echo "Building frontend Docker image..."
    - docker build -t $CI_REGISTRY_IMAGE/frontend .
  artifacts:
    paths:
      - react/Dockerfile
      - react/package.json
      - react/package-lock.json

push_frontend:
  stage: push
  image: docker:24.0.7
  variables:
    DOCKER_TLS_CERTDIR: ""
  services:
    - name: docker:24.0.7-dind
  script:
    - echo "Pushing frontend image to registry..."
    - docker login  -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" http://$CI_REGISTRY
    - docker push $CI_REGISTRY_IMAGE/frontend:latest


# ------------------------
# SONARQUBE JOB
# ------------------------

sonarqube-check:
  stage:
    sonarqube-check
  environment:
    name: SonarQube
    url: $SONAR_HOST_URL
  
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner


# ------------------------
# SECURITY JOBS
# ------------------------

docker_security_scan_back:
  stage: security_scan
  image:
    name: aquasec/trivy:0.18.0  # Use the specific version that supports --exit-code
    entrypoint: [""]
  script:
    - trivy --severity HIGH,CRITICAL $CI_REGISTRY/backend:latest


docker_security_scan_front:
  stage: security_scan
  image:
    name: aquasec/trivy:0.18.0  # Use the specific version that supports --exit-code
    entrypoint: [""]
  script:
    - trivy --severity HIGH,CRITICAL $CI_REGISTRY/frontend:latest